---
- hosts: "{{ prod_master_group_name }}, {{ prod_worker_group_name }}"
  gather_facts: False
  vars_files:
  - ../openstack_vars.yml
  vars:
    ansible_ssh_user: "{{ os_image_user }}"
  roles:
  - sys_python2
  - sys_network_manager
  - sys_package_update
  - sys_facts
  #- docker_storage

- hosts: "{{ prod_master_group_name }}"
  vars_files:
  - ../openstack_vars.yml
  vars:
    ansible_ssh_user: "{{ os_image_user }}"
  roles:
  - sudo_nopasswd
  - etcd_server
  - etcd_client
  - skydns_server
  - skydns_client
  - skydns_name_master
  - skydns_update_service
  - docker
  # NOTE: docker_network is not included here by design. Swarm masters use
  #       Docker to run the Swarm image. However, the Docker daemons on the
  #       masters should not accept scheduling requests from Swarm.
  #       Also, we can run a swarm master on the same node as a worker, as long
  #       as the master's Docker daemon is not exposed.
  - docker_swarm_master
  - docker_client_keys  # NOTE: The keys come in handy for cluster debugging.

- hosts: "{{ prod_worker_group_name }}"
  vars_files:
  - ../openstack_vars.yml
  vars:
    ansible_ssh_user: "{{ os_image_user }}"
  roles:
  - sudo_nopasswd
  - etcd_client
  - skydns_name_worker
  - skydns_update_service
  - skydns_client
  - docker
  - docker_network

- hosts: "{{ prod_master_group_name }}"
  vars_files:
  - ../openstack_vars.yml
  vars:
    ansible_ssh_user: "{{ os_image_user }}"
  roles:
  - nginx
  - pgsql
  - web_user
  - web_db
  - ruby_bundler
  - web_frontend
