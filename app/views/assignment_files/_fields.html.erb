<section class="file callout" data-pwnfx-hide-positive="file-section"
         data-pwnfx-scope="file">
  <%= f.row do %>
    <%= f.text_field :description, required: true,
          placeholder: 'Lab 1: Code Samples', label: 'Description' %>
    <div class="small-3 columns">
      <%= f.destroy_record_field :_destroy, data: { pwnfx_hide: 'file-section',
            pwnfx_hide_scope: 'file', pwnfx_hide_class: 'destroyed-blur',
            pwnfx_hide_trigger: 'checked' } %>
    </div>
  <% end %>

  <%= f.fields_for :db_file, f.object.build_db_file do |ff| %>
  <%= ff.row do %>
  <%# The form does not save an uploaded file if there are any validation errors
      throughout the form. So the least confusing way to handle invalid files is
      to bounce attempts to submit the form until a valid file is uploaded.

      TODO(spark008): Add some JS to bounce files with invalid MIME types. %>
    <%= ff.file_field :f, label: 'Resource file',
          required: (!f.object.db_file || f.object.db_file.new_record?) %>
    <div class="small-3 columns">
      <span class="comment">
        <% if f.object.db_file && !f.object.db_file.new_record? %>
          <%= link_to download_assignment_file_path(f.object,
                course_id: f.object.course) do %>
            <%= download_icon_tag %> <%= f.object.file_name %>
          <% end %>
          (<%= number_to_human_size f.object.db_file.f.size %>)
        <% end %>
      </span>
    </div>
  <% end %>
  <% end %>

  <%= f.row do %>
    <%= f.datetime_local_field :released_at,
          value: released_at_with_default(f.object), step: 1, required: true,
          data: f.optional_input_data('file'), label: 'Release date' %>
    <div class="columns">
      <%= f.check_box :reset_released_at,
            data: f.disable_switch_data('file'), label: 'Undecided' %>
    </div>
  <% end %>
</section>
